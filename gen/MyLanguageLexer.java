// Generated from C:/Users/ASUS/IdeaProjects/MyNewLanguage/MyLanguageLexer.g4 by ANTLR 4.13.1
package gen;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class MyLanguageLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		NEW_PAGE=1, CLOSE_PAGE=2, NAME=3, NAV=4, FOOTER=5, OPEN_BRACKET=6, SEIMIE_QO=7, 
		CLOSE_BRACKET=8, QOUT=9, STRING=10;
	public static final int
		PAGE=1, ATTRIBUTES=2;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE", "PAGE", "ATTRIBUTES"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"NEW_PAGE", "CLOSE_PAGE", "NAME", "NAV", "FOOTER", "OPEN_BRACKET", "SEIMIE_QO", 
			"CLOSE_BRACKET", "QOUT", "STRING"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "NEW_PAGE", "CLOSE_PAGE", "NAME", "NAV", "FOOTER", "OPEN_BRACKET", 
			"SEIMIE_QO", "CLOSE_BRACKET", "QOUT", "STRING"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public MyLanguageLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CLASSES/src/JsGrammer/MyLanguageLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\n\u00bd\u0006\uffff\uffff\u0006\uffff\uffff\u0006\uffff\uffff"+
		"\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002\u0002\u0007\u0002"+
		"\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002\u0005\u0007\u0005"+
		"\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002\b\u0007\b\u0002"+
		"\t\u0007\t\u0001\u0000\u0005\u0000\u0019\b\u0000\n\u0000\f\u0000\u001c"+
		"\t\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0005\u0000\""+
		"\b\u0000\n\u0000\f\u0000%\t\u0000\u0001\u0000\u0001\u0000\u0005\u0000"+
		")\b\u0000\n\u0000\f\u0000,\t\u0000\u0001\u0000\u0001\u0000\u0001\u0001"+
		"\u0005\u00011\b\u0001\n\u0001\f\u00014\t\u0001\u0001\u0001\u0001\u0001"+
		"\u0005\u00018\b\u0001\n\u0001\f\u0001;\t\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0002\u0005\u0002@\b\u0002\n\u0002\f\u0002C\t\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0005\u0002"+
		"K\b\u0002\n\u0002\f\u0002N\t\u0002\u0001\u0003\u0005\u0003Q\b\u0003\n"+
		"\u0003\f\u0003T\t\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005\u0003"+
		"_\b\u0003\n\u0003\f\u0003b\t\u0003\u0001\u0004\u0005\u0004e\b\u0004\n"+
		"\u0004\f\u0004h\t\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0005\u0004v\b\u0004\n\u0004\f\u0004y\t\u0004"+
		"\u0001\u0005\u0005\u0005|\b\u0005\n\u0005\f\u0005\u007f\t\u0005\u0001"+
		"\u0005\u0001\u0005\u0005\u0005\u0083\b\u0005\n\u0005\f\u0005\u0086\t\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0006\u0005\u0006\u008b\b\u0006\n\u0006"+
		"\f\u0006\u008e\t\u0006\u0001\u0006\u0001\u0006\u0005\u0006\u0092\b\u0006"+
		"\n\u0006\f\u0006\u0095\t\u0006\u0001\u0007\u0005\u0007\u0098\b\u0007\n"+
		"\u0007\f\u0007\u009b\t\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u009f"+
		"\b\u0007\n\u0007\f\u0007\u00a2\t\u0007\u0001\u0007\u0001\u0007\u0001\b"+
		"\u0005\b\u00a7\b\b\n\b\f\b\u00aa\t\b\u0001\b\u0001\b\u0005\b\u00ae\b\b"+
		"\n\b\f\b\u00b1\t\b\u0001\t\u0001\t\u0005\t\u00b5\b\t\n\t\f\t\u00b8\t\t"+
		"\u0004\t\u00ba\b\t\u000b\t\f\t\u00bb\u0000\u0000\n\u0003\u0001\u0005\u0002"+
		"\u0007\u0003\t\u0004\u000b\u0005\r\u0006\u000f\u0007\u0011\b\u0013\t\u0015"+
		"\n\u0003\u0000\u0001\u0002\u0000\u00cf\u0000\u0003\u0001\u0000\u0000\u0000"+
		"\u0001\u0005\u0001\u0000\u0000\u0000\u0001\u0007\u0001\u0000\u0000\u0000"+
		"\u0001\t\u0001\u0000\u0000\u0000\u0001\u000b\u0001\u0000\u0000\u0000\u0001"+
		"\r\u0001\u0000\u0000\u0000\u0001\u000f\u0001\u0000\u0000\u0000\u0002\u0011"+
		"\u0001\u0000\u0000\u0000\u0002\u0013\u0001\u0000\u0000\u0000\u0002\u0015"+
		"\u0001\u0000\u0000\u0000\u0003\u001a\u0001\u0000\u0000\u0000\u00052\u0001"+
		"\u0000\u0000\u0000\u0007A\u0001\u0000\u0000\u0000\tR\u0001\u0000\u0000"+
		"\u0000\u000bf\u0001\u0000\u0000\u0000\r}\u0001\u0000\u0000\u0000\u000f"+
		"\u008c\u0001\u0000\u0000\u0000\u0011\u0099\u0001\u0000\u0000\u0000\u0013"+
		"\u00a8\u0001\u0000\u0000\u0000\u0015\u00b9\u0001\u0000\u0000\u0000\u0017"+
		"\u0019\u0005 \u0000\u0000\u0018\u0017\u0001\u0000\u0000\u0000\u0019\u001c"+
		"\u0001\u0000\u0000\u0000\u001a\u0018\u0001\u0000\u0000\u0000\u001a\u001b"+
		"\u0001\u0000\u0000\u0000\u001b\u001d\u0001\u0000\u0000\u0000\u001c\u001a"+
		"\u0001\u0000\u0000\u0000\u001d\u001e\u0005h\u0000\u0000\u001e\u001f\u0005"+
		"i\u0000\u0000\u001f#\u0001\u0000\u0000\u0000 \"\u0005 \u0000\u0000! \u0001"+
		"\u0000\u0000\u0000\"%\u0001\u0000\u0000\u0000#!\u0001\u0000\u0000\u0000"+
		"#$\u0001\u0000\u0000\u0000$&\u0001\u0000\u0000\u0000%#\u0001\u0000\u0000"+
		"\u0000&*\u0005{\u0000\u0000\')\u0005 \u0000\u0000(\'\u0001\u0000\u0000"+
		"\u0000),\u0001\u0000\u0000\u0000*(\u0001\u0000\u0000\u0000*+\u0001\u0000"+
		"\u0000\u0000+-\u0001\u0000\u0000\u0000,*\u0001\u0000\u0000\u0000-.\u0006"+
		"\u0000\u0000\u0000.\u0004\u0001\u0000\u0000\u0000/1\u0005 \u0000\u0000"+
		"0/\u0001\u0000\u0000\u000014\u0001\u0000\u0000\u000020\u0001\u0000\u0000"+
		"\u000023\u0001\u0000\u0000\u000035\u0001\u0000\u0000\u000042\u0001\u0000"+
		"\u0000\u000059\u0005}\u0000\u000068\u0005 \u0000\u000076\u0001\u0000\u0000"+
		"\u00008;\u0001\u0000\u0000\u000097\u0001\u0000\u0000\u00009:\u0001\u0000"+
		"\u0000\u0000:<\u0001\u0000\u0000\u0000;9\u0001\u0000\u0000\u0000<=\u0006"+
		"\u0001\u0001\u0000=\u0006\u0001\u0000\u0000\u0000>@\u0005 \u0000\u0000"+
		"?>\u0001\u0000\u0000\u0000@C\u0001\u0000\u0000\u0000A?\u0001\u0000\u0000"+
		"\u0000AB\u0001\u0000\u0000\u0000BD\u0001\u0000\u0000\u0000CA\u0001\u0000"+
		"\u0000\u0000DE\u0005n\u0000\u0000EF\u0005a\u0000\u0000FG\u0005m\u0000"+
		"\u0000GH\u0005e\u0000\u0000HL\u0001\u0000\u0000\u0000IK\u0005 \u0000\u0000"+
		"JI\u0001\u0000\u0000\u0000KN\u0001\u0000\u0000\u0000LJ\u0001\u0000\u0000"+
		"\u0000LM\u0001\u0000\u0000\u0000M\b\u0001\u0000\u0000\u0000NL\u0001\u0000"+
		"\u0000\u0000OQ\u0005 \u0000\u0000PO\u0001\u0000\u0000\u0000QT\u0001\u0000"+
		"\u0000\u0000RP\u0001\u0000\u0000\u0000RS\u0001\u0000\u0000\u0000SU\u0001"+
		"\u0000\u0000\u0000TR\u0001\u0000\u0000\u0000UV\u0005a\u0000\u0000VW\u0005"+
		"d\u0000\u0000WX\u0005d\u0000\u0000XY\u0005 \u0000\u0000YZ\u0005n\u0000"+
		"\u0000Z[\u0005a\u0000\u0000[\\\u0005v\u0000\u0000\\`\u0001\u0000\u0000"+
		"\u0000]_\u0005 \u0000\u0000^]\u0001\u0000\u0000\u0000_b\u0001\u0000\u0000"+
		"\u0000`^\u0001\u0000\u0000\u0000`a\u0001\u0000\u0000\u0000a\n\u0001\u0000"+
		"\u0000\u0000b`\u0001\u0000\u0000\u0000ce\u0005 \u0000\u0000dc\u0001\u0000"+
		"\u0000\u0000eh\u0001\u0000\u0000\u0000fd\u0001\u0000\u0000\u0000fg\u0001"+
		"\u0000\u0000\u0000gi\u0001\u0000\u0000\u0000hf\u0001\u0000\u0000\u0000"+
		"ij\u0005a\u0000\u0000jk\u0005d\u0000\u0000kl\u0005d\u0000\u0000lm\u0005"+
		" \u0000\u0000mn\u0005f\u0000\u0000no\u0005o\u0000\u0000op\u0005o\u0000"+
		"\u0000pq\u0005t\u0000\u0000qr\u0005e\u0000\u0000rs\u0005r\u0000\u0000"+
		"sw\u0001\u0000\u0000\u0000tv\u0005 \u0000\u0000ut\u0001\u0000\u0000\u0000"+
		"vy\u0001\u0000\u0000\u0000wu\u0001\u0000\u0000\u0000wx\u0001\u0000\u0000"+
		"\u0000x\f\u0001\u0000\u0000\u0000yw\u0001\u0000\u0000\u0000z|\u0005 \u0000"+
		"\u0000{z\u0001\u0000\u0000\u0000|\u007f\u0001\u0000\u0000\u0000}{\u0001"+
		"\u0000\u0000\u0000}~\u0001\u0000\u0000\u0000~\u0080\u0001\u0000\u0000"+
		"\u0000\u007f}\u0001\u0000\u0000\u0000\u0080\u0084\u0005(\u0000\u0000\u0081"+
		"\u0083\u0005 \u0000\u0000\u0082\u0081\u0001\u0000\u0000\u0000\u0083\u0086"+
		"\u0001\u0000\u0000\u0000\u0084\u0082\u0001\u0000\u0000\u0000\u0084\u0085"+
		"\u0001\u0000\u0000\u0000\u0085\u0087\u0001\u0000\u0000\u0000\u0086\u0084"+
		"\u0001\u0000\u0000\u0000\u0087\u0088\u0006\u0005\u0002\u0000\u0088\u000e"+
		"\u0001\u0000\u0000\u0000\u0089\u008b\u0005 \u0000\u0000\u008a\u0089\u0001"+
		"\u0000\u0000\u0000\u008b\u008e\u0001\u0000\u0000\u0000\u008c\u008a\u0001"+
		"\u0000\u0000\u0000\u008c\u008d\u0001\u0000\u0000\u0000\u008d\u008f\u0001"+
		"\u0000\u0000\u0000\u008e\u008c\u0001\u0000\u0000\u0000\u008f\u0093\u0005"+
		";\u0000\u0000\u0090\u0092\u0005 \u0000\u0000\u0091\u0090\u0001\u0000\u0000"+
		"\u0000\u0092\u0095\u0001\u0000\u0000\u0000\u0093\u0091\u0001\u0000\u0000"+
		"\u0000\u0093\u0094\u0001\u0000\u0000\u0000\u0094\u0010\u0001\u0000\u0000"+
		"\u0000\u0095\u0093\u0001\u0000\u0000\u0000\u0096\u0098\u0005 \u0000\u0000"+
		"\u0097\u0096\u0001\u0000\u0000\u0000\u0098\u009b\u0001\u0000\u0000\u0000"+
		"\u0099\u0097\u0001\u0000\u0000\u0000\u0099\u009a\u0001\u0000\u0000\u0000"+
		"\u009a\u009c\u0001\u0000\u0000\u0000\u009b\u0099\u0001\u0000\u0000\u0000"+
		"\u009c\u00a0\u0005)\u0000\u0000\u009d\u009f\u0005 \u0000\u0000\u009e\u009d"+
		"\u0001\u0000\u0000\u0000\u009f\u00a2\u0001\u0000\u0000\u0000\u00a0\u009e"+
		"\u0001\u0000\u0000\u0000\u00a0\u00a1\u0001\u0000\u0000\u0000\u00a1\u00a3"+
		"\u0001\u0000\u0000\u0000\u00a2\u00a0\u0001\u0000\u0000\u0000\u00a3\u00a4"+
		"\u0006\u0007\u0001\u0000\u00a4\u0012\u0001\u0000\u0000\u0000\u00a5\u00a7"+
		"\u0005 \u0000\u0000\u00a6\u00a5\u0001\u0000\u0000\u0000\u00a7\u00aa\u0001"+
		"\u0000\u0000\u0000\u00a8\u00a6\u0001\u0000\u0000\u0000\u00a8\u00a9\u0001"+
		"\u0000\u0000\u0000\u00a9\u00ab\u0001\u0000\u0000\u0000\u00aa\u00a8\u0001"+
		"\u0000\u0000\u0000\u00ab\u00af\u0005\'\u0000\u0000\u00ac\u00ae\u0005 "+
		"\u0000\u0000\u00ad\u00ac\u0001\u0000\u0000\u0000\u00ae\u00b1\u0001\u0000"+
		"\u0000\u0000\u00af\u00ad\u0001\u0000\u0000\u0000\u00af\u00b0\u0001\u0000"+
		"\u0000\u0000\u00b0\u0014\u0001\u0000\u0000\u0000\u00b1\u00af\u0001\u0000"+
		"\u0000\u0000\u00b2\u00b6\u0002az\u0000\u00b3\u00b5\u0005 \u0000\u0000"+
		"\u00b4\u00b3\u0001\u0000\u0000\u0000\u00b5\u00b8\u0001\u0000\u0000\u0000"+
		"\u00b6\u00b4\u0001\u0000\u0000\u0000\u00b6\u00b7\u0001\u0000\u0000\u0000"+
		"\u00b7\u00ba\u0001\u0000\u0000\u0000\u00b8\u00b6\u0001\u0000\u0000\u0000"+
		"\u00b9\u00b2\u0001\u0000\u0000\u0000\u00ba\u00bb\u0001\u0000\u0000\u0000"+
		"\u00bb\u00b9\u0001\u0000\u0000\u0000\u00bb\u00bc\u0001\u0000\u0000\u0000"+
		"\u00bc\u0016\u0001\u0000\u0000\u0000\u0018\u0000\u0001\u0002\u001a#*2"+
		"9ALR`fw}\u0084\u008c\u0093\u0099\u00a0\u00a8\u00af\u00b6\u00bb\u0003\u0005"+
		"\u0001\u0000\u0004\u0000\u0000\u0005\u0002\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}